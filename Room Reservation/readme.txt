Program files:* client.cpp* serverC.cpp* serverEEB.cpp* serverRTH.cpp* serverM.cpp* MakefileMessage exchange formats:Username and password: "Credential: Username:" + Username + " " + "Password:" + password.serverC response message:* Authentication:0 Username does not exist for <username>* Authentication:1 Password does not match for <username>* Authentication:2 Successful authentication for <username>Guest authentication from serverM: Authentication:3Room request: "Room:" + roomNumber + " Day:" + day + " Time:" + time + " Option:" + option (<availability or reservation>) + " Username:" + username + " !<Guest or Membe>";. Note that it is “Membe” not “Member” because both “Guest” and “Membe” are 5 characters long.Availability response:* (Provided room only) Not able to find the room <roomNumber>.* (Provided room only) Day: <day>, Time: <time> - Available* (Provided day) No available times: room <roomNumber>.* (Provided day) Time: <time> - Available* (Provided day and time) Room <roomNumber> is available at <time> on <day>.* (Provided day and time) Room <roomNumber> is not available at <time> on <day>.Reservation response(Fx = fails, S0 = success):* (Room not found) Reservation result: <roomNumber> F0.* (Room found and available) Reservation result: <roomNumber> S0.* (Room found, but desired time is already booked) Reservation result: <roomNumber> F1. * (Room found, but the room has no time slot at desired time) Reservation result: <roomNumber> F2. Program summary: 	This program is a room-booking system built using c++. The program consists of two backend room servers, one client server that has a guest mode and a member mode, an authentication server for client tracking, and a main server. All communication messages are of type c_str and are done between any non-main server and the main server. 	A guest client is able to check the availability of the rooms in the two building, and a member client can either check the availability or make a reservation (cannot perform both at the same time). Detailed results are provided on the client server for different scenarios.Instructions:	The program developed using CLion,  c++17, and was compiled and run in Ubuntu 22.04. The following boot up order was used for testing: serverM, serverC, serverEEB, serverRTH, client, client.       